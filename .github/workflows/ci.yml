name: CI Pipeline

on:
  pull_request:
    paths:
      - 'cloe/**'
      - 'configs/**'
      - 'environment.yml'
      - 'setup.cfg'
      - '.github/workflows/ci.yml'
      - 'setup.py'
  push:
    branches:
      - main
    paths:
      - 'cloe/**'
      - 'configs/**'
      - 'environment.yml'
      - 'setup.cfg'
      - '.github/workflows/ci.yml'
      - 'setup.py'
  workflow_dispatch:

env:
  IMAGE: myregistry/myimage:latest
  WORKDIR: /src

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pull & run tests in Docker
        run: |
          docker pull $IMAGE
          docker run --rm \
            -v "$PWD":$WORKDIR -w $WORKDIR \
            $IMAGE \
            bash -lc "python -m pytest \
              --verbose \
              --pycodestyle \
              --pydocstyle \
              --cov=./ \
              --cov-report=term \
              --cov-report=xml=coverage.xml \
              --junitxml=pytest.xml"

      - name: Upload JUnit report
        uses: actions/upload-artifact@v4
        with:
          name: junit-report
          path: pytest.xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  verification:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Pull & run verification suite
        run: |
          docker pull $IMAGE
          docker run --rm \
            -v "$PWD":$WORKDIR -w $WORKDIR \
            $IMAGE \
            bash -lc "export TF_CPP_MIN_LOG_LEVEL=1 && \
              python -m pytest cloe/tests/verification --junitxml=verification.xml"

      - name: Upload verification report
        uses: actions/upload-artifact@v4
        with:
          name: verification-report
          path: verification.xml

  docs_review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Pull & build Sphinx docs
        run: |
          docker pull $IMAGE
          docker run --rm \
            -v "$PWD":$WORKDIR -w $WORKDIR \
            $IMAGE \
            bash -lc "mkdir -p docs/build && \
              sphinx-apidoc --module-first -feo docs/source cloe && \
              sphinx-build docs/source docs/build"

      - name: Upload HTML build
        uses: actions/upload-artifact@v4
        with:
          name: html-build
          path: docs/build

  pages:
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Pull & deploy docs to GH Pages
        run: |
          docker pull $IMAGE
          docker run --rm \
            -v "$PWD":$WORKDIR -w $WORKDIR \
            $IMAGE \
            bash -lc "mkdir -p docs/build && \
              sphinx-apidoc --module-first -feo docs/source cloe && \
              sphinx-build docs/source docs/build"

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v5
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/build
          publish_branch: gh-pages

  profiling:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Pull & run profiling
        run: |
          docker pull $IMAGE
          docker run --rm \
            -v "$PWD":$WORKDIR -w $WORKDIR \
            $IMAGE \
            bash -lc "mkdir -p products && \
              python -m cProfile -o products/evaluate_likelihood.pstats \
                run_cloe.py configs/config_profiling_evaluate_likelihood.yaml && \
              python -m cProfile -o products/mcmc.pstats \
                run_cloe.py configs/config_profiling_mcmc.yaml"

      - name: Upload profiling artifacts
        uses: actions/upload-artifact@v4
        with:
          name: profiling-report
          path: products/
