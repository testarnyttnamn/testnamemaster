# -*- coding: utf-8 -*-
"""LIKELIHOOD USER INTERFACE

Top level user interface class for running CLOE
"""

from likelihood.auxiliary import yaml_handler, likelihood_params_yaml_generator
from likelihood.cobaya_interface import EuclidLikelihood
import cobaya.run
from pathlib import Path
import collections.abc


class LikelihoodUI:
    r"""Top level user interface class for running CLOE.

    """

    def __init__(self, user_config_file=None, defaults_config_file=None):
        r"""Constructor.

        Load the default configuration for running CLOE, then (if provided)
        read the user-defined configuration and merge it into the default
        configuration.

        Parameters
        ----------
        user_config_file: str, optional
           Name of the yaml configuration file containing the user-defined
           parameters that will determine the behavior of CLOE.
           If not provided, the parameters from the default configuration will
           be used.

        defaults_config_file: str, optional
           Name of the yaml configuration file containing the default values
           of the parameters that do not appear in the user_config_file. If
           not provided, the file defaults_config.yaml in the top level of
           the project will be used.
        """
        if defaults_config_file is None:
            defaults_dir = 'config_yaml'
            defaults_name = 'defaults_config.yaml'
            defaults_path = Path(__file__).resolve().parent.parent
            defaults_path = defaults_path.joinpath(defaults_dir)
            defaults_config_file = defaults_path.joinpath(defaults_name)

        self._config = yaml_handler.yaml_read(defaults_config_file)

        if user_config_file is not None:
            user_config = yaml_handler.yaml_read(user_config_file)
            self._config = self._update_config(
                orig_config=self._config,
                update_config=user_config
            )

    def run(self):
        r"""Main method to run CLOE

        Read the backend from the input configuration and call the desired
        backend-specific function.

        Returns
        -------
        tuple
           An updated information dictionary, plus the products generated by
           the sampler used.
           At present this is the very same thing that is returned by the run()
           method of Cobaya, because Cobaya is the only implemented backend.

        Raises
        ------
        KeyError
           if the yaml file does not contain the 'backend' key
        ValueError
           if the specified backend is not supported
        """
        key = 'backend'
        if key not in self._config:
            raise KeyError(f'key \'{key}\' not found in input configuration')

        backend = self._config[key]
        if backend == 'Cobaya':
            return self._run_cobaya()
        elif backend == 'Cosmosis':
            raise NotImplementedError('Support for the Cosmosis backend is'
                                      ' not yet implemented')
        else:
            raise ValueError(f'The requested backend is not supported: '
                             f'{backend}')

    def _run_cobaya(self):
        r"""Run CLOE using Cobaya as backend.

        Returns
        -------
        tuple
          An updated information dictionary, plus the products generated by the
          sampler used.
          This is the very same thing that is returned by the run() method of
          Cobaya.

        Raises
        ------
        KeyError
           if the configuration does not contain a key named 'Cobaya'
        """
        key = 'Cobaya'
        if key not in self._config:
            raise KeyError(f'key \'{key}\' not found in input configuration')
        likelihood_params_yaml_generator.generate_params_yaml(model=1)
        return cobaya.run(self._config[key])

    @staticmethod
    def _update_config(orig_config, update_config):
        r"""Update nested dictionary recursively

        Parameters
        ----------
        orig_config: dict
           The dictionary to be updated
        update_config: dict
           The dictionary with the updates to be applied

        Returns
        -------
        dict
           The updated dict
        """
        for key, val in update_config.items():
            if(isinstance(val, collections.abc.Mapping)):
                orig_config[key] = (
                    LikelihoodUI._update_config(orig_config.get(key, {}), val)
                )
            else:
                orig_config[key] = val
        return orig_config
